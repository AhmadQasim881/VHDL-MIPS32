/*fibonacci by recursion*/

fun fibonacci(int n)
{
if( n==0 ) {return 0; }
if( n==1 ) { return 1; }
int x1,x2,n1,n2,result;
n1=n-1;   
n2=n-2;
x1= fibonacci(n1);
x2= fibonacci(n2);
result = x1+x2; 
return result;

}

fun main()
{
      int x;
      x=fibonacci(5);
      x =x+0;
}

/******************************************/

/*Factorial by recusion*/

fun fac(int x)
{
     int f;
     if(x==0){ return 0; }
     if(x==1){return 1; }
     x=x-1;
     f=fac(x);
     f=x*f;
    return f;
} 


fun main()
{
      int x;
      x = fac(5);
     x=x+0;
}

/*****************************************/
/*reverse two numbers then add the numbers between them*/

fun reverseDigits(int num)
{
    int rev_num ;
     rev_num=0;
    while (num > 0) {
        rev_num = rev_num * 10 + ( num - (num / 10)*10 )  ;
        num = num / 10;
    }
    return rev_num;
}



fun add_from_x_to_y(int x,int y)
{
   x=reverseDigits(x);
   y = reverseDigits(y);
   int i,z;
   z = 0;
    for(i=x;i<=y;i=i+1){ z=z+i; }
    return z;
} 


fun main()
{
      int x;
      x = add_from_x_to_y(0,19);
     x=x+0;
}

/************************************************/

/*to find the power of a number*/

fun power(int x,int n) /*x^n*/
{
     int i,result;
     result=1;
     if(n==0){ return 1; } //if the power is zero, so I will return 1
     for(i=0;i<n;i=i+1)
     { 
         result=result*x;
     }
     return result;
}

fun main()
{  
    int x;
    x=power(3,3);
    x=x+0;
}



